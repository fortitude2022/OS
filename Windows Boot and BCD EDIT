rootkits:
  bootkits fuck with boot process
  firmkits: difficult to get rid of
  	goes deeper than even the kernel
  kernelkits: less common due to OS manufacturers hardening/virtualizing their kernels
  driver level rootkits
  generic rootkits: 

great for persistence, hard to find:
but...
hard to remove also

rootkits can get around system restore

Boot Process

POST Power On Self Test occurs on trigger
	can be manipulated by firmware
	
BIOS AND UEFI
treat as seperate
BIOS is simpler
UEFI is backwards compat

Windows 10 uses UEFI

BIOS requires
	reads MBR mastbootrec 
		512 bytes of primary HD, (always first 512)
		Boot Loader
		Partition Table
			maximum 4 partitions
			individual partitions can be partitioned further
			C drive, restore, 2 other drives meant for backups ( 1 for boot, )
	Windows Boot Manager
		(bootmgr) manages boot proc
	BCD Boot Config Data Store
	OSLoader
		winload.exe cold start
		winresume.exe for hibernation
		for ssds, fast boot has no rationale to be enabled
			for hibernations, RAM is written to hibernation.sys and saved to C drive
			true shutdown, nothing written to a file
			fast-boot: combo of both, writes what system is doing to a page file on C drive, then turns off, no user data saved
				only applies to shutdowns, NOT restarts; thats why restarts fix stuff at OS level
		ntoskernel.exe loads kernel
			

UEFI has its own organic OS, far more secure (Kernel 6 and above)
	secureboot enabled
		pre-kernel boot: mitigates driver level rootkits before OS loads
		some anti-virus software is signed allowing it to load pre-OS
		
	Process:
	GPT:
		UEFI knows where GPT is, no 2 GPT tables ought to be in same locale (exc if master image )
	UEFI Boot manger bootmgrfw.efi
		mngs boot proc
	BCD
		2007 and before: boot.ini replaced (red flag if found)
	OS loader
		same but with .efi inst of .exe
		ntoskernel.exe
	
Kernel Loads:
System (PID 4) is loaded:

SMSS.exe
	1995 and on, before: you needed to log off fully before switching users
	Session Manager Something Something
		allows for multiple user sessions
		keeps admin accts safe
	when it loads for first time, its owned by sysstem and creates session 0, then creates session 1 after forking itself
		session 1 creates csrss.exe and winlogin 1
		session 0 creates csrss 0 and wininit 0
CSRSS.exe
	each smss has its own
WININIT.exe from SMSS 0
	inits windows
LSASS and services.exe
	loaded by WININIT
	LSASS security 
	services.exe manages services
WINLOGON from SMSS 1
	logon process for windows
LOGONUI.exe and USERINIT.exe from WINLOGON
	logonui asks for uname + pw; passes cred up to lsass then self immolates
	if lsass gives OK, userinit runs (technically doesnt exist fsr); launches explorer.exe (default shell for windows GUI)
	
		
========== alternative ==========

ntoskrnl.exe kernel + windows executive
	smss.exe(0) Master session manager
		csrss.exe(0) win subsystem process / WIN API
			-kernel32.dll
			-user32
			-gdi32
			-advapi32
			-kernelbase
			-win32k.sys -Kernel Mode
			-conhost.exe - security layer for Console apps
		WININIT.exe(0) Windows init process
			services.exe(0) 
			
			
			
			
			
			
================ BCD EDIT =========================


			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		
		
		
		
	
