================================Logging=============================
Annotation of different events
Logs can tell us whether our system was compromised
	evidence of compromise allows us to ID weaknesses
On Offense, you want to avoid tripping logs

Pros:
	remote logging

Cons:
	can be cryptic, hard to understand, require exp sftwr
	info overload
	logging params might miss events and not be helpful
	issues arise if time desynched between systems
	Resource heavy, i.e. power and memory
	if and adversary see those logs get tripped, they know they are on an important system
Summary:
	Logging is useful, but only w/ context
	
==================================== Log Types ========================================
CONFIGURATION: /etc/rsyslog.conf

format:		facility . severity
facility: event type
severity: level and higher
* = all
; = except the following


Authentication:----------------------------------------
/var/log/auth.log Authentication rel
/var/run/utmp	users currently logged in
/var/log/wtmp	history file for utmp
/var/log/btmp	failed logins
	Notes:
		sudo tail /var/log/auth.log
		ssh session indication:
			Accepted password ...
			pam_unix ... (pam is a plugin for ssh, inquire)
			New Session XYZ ...
			Accepted Ppublickey ...
			#switch user
			Succcessful su for xyztty by johndoe...
			+ /dev/pts/<x> for xyz ...
			
Application:-------------------------------------------
apache - directory found on web servers
apt - package manager (directory)

/var/log/mysql.log

System:------------------------------------------------
/var/log/messages	legacy catch all
/var/log/syslog 	ubuntu/debian catch all

dmesg = device messenger queires /proc/kmsg
	Notes:
		first logs gen'd by system
		
=============================== Log Settings ============================

Location : /var/log
Config File : /etc/rsyslog.conf
Service : /usr/sbin/rsyslogd

--------------------- Daemon -----------------------
/usr/sbin/rsyslogd
	reads msgs written to /dev/log
	format/stores these based on /etc/rsyslog.conf
	syslog() - libc
	kernel ring buffer
	audit records w/ auditd
	
Facility Codes: 
0   kernel messages
1   user-level messages
2   mail system
3   system daemons
4   security/authorization messages
5   messages generated internally by syslogd
6   line printer subsystem
7   network news subsystem
8   UUCP subsystem
9   clock daemon
10  security/authorization messages
11  FTP daemon
12  NTP subsystem13|log audit
(abridged, 23 total, query gunny google for more)

Severity Codes:
0-7
0 emerg, panic: system unusable
1 alert: action needed NOW
2: crit: critical conditns
3: err, error: erros conditns
4: warn, warning: Warning conditions
5  notice: Normal but significant condition
6  info: Informational messages
7  Debug: Debug-level messages

========================== Log Enum/Mgmnt =============================

/etc/logrotate.conf : determines how large logs get, how often they rotate

Commands:
ls -l /var/log
tail -f -> continuously show file end
less /var/log/syslog views log in a page viewer frmt
logger - see man
> var/log/messages - wipes logs
	overwriting the file instead of replacing will KEEP that inode number, less sus, but still risky/sus due to sweeping deletion of logfile;
	relies on advs' ignorance/lazyness to check, -last resort only-
last -f /var/log{wtmp,btmp} - Needed to view data files

for the xtmp files, they are binary and NEED the last -f command to view
tty = physical access
vty = desktop session (sometimes telnet)
pts = ssh type connection

========================= Auditing vs Logging ======================

Logging: system/app defined
Auditing: User defined

[kauditd] - runs at kernel level, cannot monitor individual syscalls (/sbin/auditd)

auditctl - control/config command
aureport - summarize audit logs
ausearch - queries audit logs


Notes:=================================

sudo journalctl -ef -t sshguard -t sshd (queries info from sshguard service about login attempts)
grep timesync /var/log/syslog

Systemd only...
assume sudo ...
journalctl --list-boots
	list boot session IDs
journalctl -b <bootsessionID>
	list events in that one boot session
	can also query boot by "index" i.e. 3 boots ago etc...
-e page by page
journalctl --since "datestring"
	ex:
		journaltcl --since "2022-01-20" #anything since 22JAN20
	can also close out w/ --until
	ex:
		journalctl --since "2022-06-20" --until "2022-06-24"
	time params can aslo take strings like "1 hour ago", "yesterday", and exact time as well
journalctl _PID=<pid>
journalctl -k shows kernel msgs
journalctl -p err
	#shows all error messages
journalctl -p err -b 3
	#error msgs from 3 boots ago

-Some logs have different markup languages i.e. xml
-some logs are in binary frmt
-JSON (splunk) javascript object notation, human readable

journalctl -p alert -o json-pretty
	#outfiles alert msgs in json format
journalctl -n <#>
	x most recent entries
journalctl --vacuum-size=1G
	#clears logs by 1 Gigabyte (by virtue of age)
	also:
	--vacuum-time=1month
	# clears logs that are older than 1 month
/etc/systemd/journald.conf
	config file for journalctl

auditctl -l
	# queries -list- of user rules
auditctl -s
	# q's current -state- of the audit system
#writing a rule
auditctl -w /etc/hosts -p wa -k hosts_file_change
	(beware - and !-)
	-w dir specified
	-p perms
	w write
	-a attribs
	-x execute
	-k pname you gen'd (rule name)
	-W (capital W, removes rule)
	#this example logs changes to /etc/hosts file
	Study this, this is format for Audit rules...
	
aureport
	# gives verbose summary of the user gen'd logs
	
ausearch -k configaccess
	searches auditlogs for whatever entry youre looking for
	-a action
	-s for system calls
	-k for keyname

























